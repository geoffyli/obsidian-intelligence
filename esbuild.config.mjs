import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { sassPlugin } from "esbuild-sass-plugin";
import postcss from "postcss";
import tailwindcss from "tailwindcss";
import autoprefixer from "autoprefixer";
import sveltePlugin from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	conditions: ["svelte", "browser", "import"],
	plugins: [
		sassPlugin({
			type: "css-text",
			filter: /\.scss$/,
		}),
        sveltePlugin({
            preprocess: sveltePreprocess({
                typescript: {
                    tsconfigFile: './tsconfig.json'
                }
            }),
            compilerOptions: {
                dev: !prod,
                css: 'injected',
                generate: 'dom',
                hydratable: false
            },
            filterWarnings: (warning) => {
                // Suppress unused CSS selector warnings in development
                if (warning.code === 'css-unused-selector') return false;
                return true;
            }
        }),
	],
});

// Build SCSS separately to generate styles.css with Tailwind processing
const cssContext = await esbuild.context({
    entryPoints: ["src/styles/main.scss"], // This handles your global styles
    bundle: true,
    outfile: "styles.css",
    plugins: [
        sassPlugin({
            type: "css", // Output a separate CSS file
            filter: /\.scss$/,
            async transform(source, dir) {
                const { css } = await postcss([
                    tailwindcss, // Use Tailwind v3
                    autoprefixer,
                ]).process(source, { 
                    from: dir + '/main.scss',
                    to: './styles.css'
                });
                return css;
            },
        }),
    ],
    logLevel: "info",
    minify: prod,
});

if (prod) {
	await context.rebuild();
	await cssContext.rebuild();
	process.exit(0);
} else {
	await context.watch();
	await cssContext.watch();
}
