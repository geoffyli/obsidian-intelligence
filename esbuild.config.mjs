/* eslint-disable @typescript-eslint/no-var-requires */
import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { execSync } from "child_process";
import fs from "fs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/`;

const prod = process.argv[2] === "production";
const dev = !prod;

// Plugin to handle CSS bundling
const cssPlugin = {
	name: "css-bundler",
	setup(build) {
		build.onStart(() => {
			// Build Tailwind CSS before bundling
			console.log("Building Tailwind CSS...");
			execSync("npm run css", { stdio: "inherit" });
		});

		build.onLoad({ filter: /\.css$/ }, async (args) => {
			const css = await fs.promises.readFile(args.path, "utf8");
			return {
				contents: css,
				loader: "css",
			};
		});
	},
};

async function run() {
	const context = await esbuild.context({
		banner: {
			js: banner,
		},
		entryPoints: ["src/main.ts"],
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins,
		],
		format: "cjs",
		target: "es2020",
		logLevel: "info",
		sourcemap: dev ? "inline" : false,
		minify: !dev,
		treeShaking: true,
		outfile: "main.js",
		// React/JSX configuration
		loader: {
			".tsx": "tsx",
			".ts": "ts",
			".jsx": "jsx",
			".js": "js",
		},
		jsx: "automatic",
		jsxImportSource: "react",
		// Plugins
		plugins: [cssPlugin],
		// Define for process.env replacements and browser compatibility
		define: {
			"process.env.NODE_ENV": JSON.stringify(
				prod ? "production" : "development"
			),
			global: "globalThis",
			"process.versions.node": "undefined",
		},
		platform: "node", // Ensure Node.js built-ins are resolved
	});

	if (prod) {
		await context.rebuild();
		process.exit(0);
	} else {
		await context.watch();
	}
}

run();
